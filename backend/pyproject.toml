[tool.poetry]
name = "backend"
version = "0.1.0"
description = ""
authors = ["v.karmazin"]
readme = "README.md"
package-mode = false

[[tool.poetry.source]]
# TODO: keep only gpu version
name = "pytorch"
# GPU (cu116)
#url = "https://download.pytorch.org/whl/cu116"
# CPU
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[tool.poetry.dependencies]
python = "^3.9.8"
faiss-cpu = "^1.8.0"
pymilvus = "~2.4"  # keep synchronized with actual Milvus version in docker-compose.yaml
fastapi = "^0.111.0"
languagebind = {path = "../LanguageBind"}
cachetools = "^5.5.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.4.2"
mypy = "^1.10.0"
pytest = "^8.2.0"

[tool.mypy]
pretty = true
python_version = 3.9
ignore_missing_imports = true

[tool.ruff]
lint.ignore = [
    "ERA001",  # Found commented-out code
    "ANN204",  # Missing return type annotation for special method `__init__`
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "S311",  # Standard pseudo-random generators are not suitable for cryptographic purposes
    "S603",  # subprocess call: check for execution of untrusted input
    "A002",  # Argument `id` is shadowing a Python builtin
]
line-length = 120
lint.select = [
    "A", # flake8-builtins
    "ARG", # flake8-unused-arguments
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "E", # pycodestyle
    "ERA", # eradicate
    "I", # isort
    "F", # Pyflakes
    "G", # flake8-logging-format
    "N", # pep8-naming
    "PL", # pylint
    "PT", # flake8-pytest-style
    "RET", # flake8-return
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "T20", # flake8-print
    "UP", # pyupgrade
    "ANN" # flake8-annotations
]
target-version = "py39"

[tool.ruff.lint.per-file-ignores]
"scripts/*" = [
    "T201",  # `print` found
    "PLR0915",  # Too many statements
    "PLR0913",  # Too many arguments in function definition
    "PLR0912",  # Too many branches
]

[tool.ruff.lint.pylint]
max-args = 8

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
